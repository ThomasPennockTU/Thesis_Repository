# -*- coding: mbcs -*-
#
# Abaqus/CAE Release 2023 replay file
# Internal Version: 2023_03_20-20.15.03 RELr425 183417
# Run by tpennock on Tue May 20 14:59:12 2025
#

# from driverUtils import executeOnCaeGraphicsStartup
# executeOnCaeGraphicsStartup()
#: Executing "onCaeGraphicsStartup()" in the site directory ...
from abaqus import *
from abaqusConstants import *
session.Viewport(name='Viewport: 1', origin=(0.0, 0.0), width=532.666687011719, 
    height=243.115371704102)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].maximize()
from caeModules import *
from driverUtils import executeOnCaeStartup
executeOnCaeStartup()
openMdb('First delta flume.cae')
#: The model database "D:\tpennock\GitHub\Thesis_Repository\1.2-9 Block Flume pull test\First delta flume.cae" has been opened.
session.viewports['Viewport: 1'].setValues(displayedObject=None)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
p = mdb.models['Model-1'].parts['Block']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    optimizationTasks=OFF, geometricRestrictions=OFF, stopConditions=OFF)
session.viewports['Viewport: 1'].view.setValues(nearPlane=59.4847, 
    farPlane=92.9293, width=29.4913, height=10.7757, viewOffsetX=5.84649, 
    viewOffsetY=-1.17081)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Gravity')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Loading')
o3 = session.openOdb(
    name='D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb')
#: Model: D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     13
#: Number of Meshes:             14
#: Number of Element Sets:       0
#: Number of Node Sets:          4
#: Number of Steps:              2
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb'])
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
session.viewports['Viewport: 1'].view.setValues(nearPlane=48.6066, 
    farPlane=82.3051, width=47.1511, height=16.3791, viewOffsetX=-1.21405, 
    viewOffsetY=-0.398113)
session.viewports['Viewport: 1'].view.setValues(nearPlane=49.8905, 
    farPlane=81.0212, width=31.0938, height=10.8012, viewOffsetX=2.04886, 
    viewOffsetY=-1.83903)
session.viewports['Viewport: 1'].view.setValues(nearPlane=50.5321, 
    farPlane=83.8501, width=31.4936, height=10.9401, cameraPosition=(68.0114, 
    40.3687, -16.3407), cameraUpVector=(-0.780465, 0.57735, 0.239878), 
    cameraTarget=(16.9254, 2.57775, -0.639306), viewOffsetX=2.07521, 
    viewOffsetY=-1.86268)
session.viewports['Viewport: 1'].view.setValues(nearPlane=52.3565, 
    farPlane=82.0257, width=6.22104, height=2.16103, viewOffsetX=1.56981, 
    viewOffsetY=-2.05909)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0:3 #8 ]', )), ), )
xyp = session.XYPlot('XYPlot-1')
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
session.xyPlots['XYPlot-1'].setValues(session.views['Iso'])
#* CanvasError: ValueError: A camera view cannot be associated with a transform 
#* view.
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-8-LIN-2-1-LIN-LIN-11-1-5', 1, ('[#1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
xyp = session.xyPlots['XYPlot-1']
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-8-LIN-2-1-LIN-LIN-11-1-5', 1, ('[#1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
session.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=(('U', 
    NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-8-LIN-2-1-LIN-LIN-11-1-5', 1, ('[#1 ]', )), ), )
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-8-LIN-2-1-LIN-LIN-11-1-4', 1, ('[#2000000 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
session.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=(('U', 
    NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-8-LIN-2-1-LIN-LIN-11-1-4', 1, ('[#2000000 ]', )), ), )
session.xyDataObjects.changeKey(
    fromName='_U:U2 PI: BLOCK-2-LIN-1-8-LIN-2-1-LIN-LIN-11-1-4 N: 26', 
    toName='TimeCurve')
xy1 = session.xyDataObjects['TimeCurve']
xy2 = vectorX(xy1)*(13540/12)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
c1 = session.Curve(xyData=xy2)
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
#* NameError: name 'vectorX' is not defined
xy1 = session.xyDataObjects['TimeCurve']
xy2 = vectorX(xy1)*(13540/12)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
c1 = session.Curve(xyData=xy2)
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
#* NameError: name 'vectorX' is not defined
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
import sys
sys.path.insert(8, 
    r'c:/Programs/SIMULIA/EstProducts/2023/win_b64/code/python2.7/lib/abaqus_plugins/amplitudePlotter')
import amplitudeTools
amplitudeTools.plotAmplitudes(amplitudeNameList=(('pull_step', ), ), 
    needXmin=0, needXmax=0, needSaveXYPlot=0, displayLegend=1, 
    applySmoothingFactor=0)
session.viewports['Viewport: 1'].makeCurrent()
del session.viewports['Viewport: Amplitude Plotter']
del session.xyPlots['Amplitude Plotter-1']
del session.xyDataObjects['_temp_ap_pull_step']
amplitudeTools.plotAmplitudes(amplitudeNameList=(('pull_step', ), ), 
    needXmin=0, needXmax=0, needSaveXYPlot=0, displayLegend=1, 
    applySmoothingFactor=0)
amplitudeTools.plotAmplitudes(amplitudeNameList=(('pull_step', ), ), 
    needXmin=0, needXmax=0, needSaveXYPlot=1, displayLegend=1, 
    savedPlotNameTuple= (('pull_step', ), ), applySmoothingFactor=0)
session.viewports['Viewport: 1'].makeCurrent()
del session.viewports['Viewport: Amplitude Plotter']
del session.xyPlots['Amplitude Plotter-1']
xyp = session.xyPlots['XYPlot-1']
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
xy1 = session.xyDataObjects['pull_step']
c1 = session.Curve(xyData=xy1)
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
xy1 = session.xyDataObjects['pull_step']
xy2 = xy1*13540
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
c1 = session.Curve(xyData=xy2)
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
xy1 = session.xyDataObjects['pull_step']
xy2 = xy1*13540
xy2.setValues(sourceDescription='"pull_step"*13540')
tmpName = xy2.name
session.xyDataObjects.changeKey(tmpName, 'Force')
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
xy1 = session.xyDataObjects['Force']
c1 = session.Curve(xyData=xy1)
chart.setValues(curvesToPlot=(c1, ), appendMode=True)
session.charts[chartName].autoColor(lines=True, symbols=True)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
xy1 = session.xyDataObjects['U:U2 PI: BLOCK-2-LIN-1-8-LIN-2-1-LIN-LIN-11-1-4 N: 26']
c1 = session.Curve(xyData=xy1)
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
xy1 = session.xyDataObjects['U:U2 PI: BLOCK-2-LIN-1-8-LIN-2-1-LIN-LIN-11-1-5 N: 1']
c1 = session.Curve(xyData=xy1)
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
xy1 = session.xyDataObjects['TimeCurve']
c1 = session.Curve(xyData=xy1)
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
xy1 = session.xyDataObjects['pull_step']
c1 = session.Curve(xyData=xy1)
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
del session.xyDataObjects['TimeCurve']
del session.xyDataObjects['U:U2 PI: BLOCK-2-LIN-1-8-LIN-2-1-LIN-LIN-11-1-4 N: 26']
del session.xyDataObjects['U:U2 PI: BLOCK-2-LIN-1-8-LIN-2-1-LIN-LIN-11-1-5 N: 1']
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test/Job-1.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0:3 #8 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
xy1 = session.xyDataObjects['Force']
c1 = session.Curve(xyData=xy1)
chart.setValues(curvesToPlot=(c1, ), appendMode=True)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.xyPlots[session.viewports['Viewport: 1'].displayedObject.name].setValues(
    transform=(0.854125, 0, 0, -0.0824246, 0, 0.854125, 0, -0.00426837, 0, 0, 
    0.854125, 0, 0, 0, 0, 1))
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(interactions=ON, 
    constraints=ON, connectors=ON, engineeringFeatures=ON)
xyp = session.xyPlots['XYPlot-1']
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
