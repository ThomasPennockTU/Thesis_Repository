# -*- coding: mbcs -*-
#
# Abaqus/CAE Release 2023 replay file
# Internal Version: 2023_03_20-20.15.03 RELr425 183417
# Run by tpennock on Mon May 26 09:36:17 2025
#

# from driverUtils import executeOnCaeGraphicsStartup
# executeOnCaeGraphicsStartup()
#: Executing "onCaeGraphicsStartup()" in the site directory ...
from abaqus import *
from abaqusConstants import *
session.Viewport(name='Viewport: 1', origin=(0.0, 0.0), width=532.666687011719, 
    height=243.115371704102)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].maximize()
from caeModules import *
from driverUtils import executeOnCaeStartup
executeOnCaeStartup()
openMdb('First delta flume.cae')
#: The model database "D:\tpennock\GitHub\Thesis_Repository\1.2-9 Block Flume pull test fd\First delta flume.cae" has been opened.
session.viewports['Viewport: 1'].setValues(displayedObject=None)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
p = mdb.models['Model-1'].parts['Block']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
session.viewports['Viewport: 1'].partDisplay.setValues(sectionAssignments=ON, 
    engineeringFeatures=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    optimizationTasks=OFF, geometricRestrictions=OFF, stopConditions=OFF)
session.viewports['Viewport: 1'].view.setValues(nearPlane=57.7069, 
    farPlane=94.7071, width=53.3425, height=18.5299, viewOffsetX=6.42463, 
    viewOffsetY=-1.85451)
session.viewports['Viewport: 1'].view.setValues(nearPlane=61.0328, 
    farPlane=101.245, width=56.4169, height=19.5978, cameraPosition=(82.2735, 
    47.1273, 3.42898), cameraUpVector=(-0.815875, 0.57735, -0.0318591), 
    cameraTarget=(20.0981, 3.12913, 1.0011), viewOffsetX=6.79491, 
    viewOffsetY=-1.96139)
session.viewports['Viewport: 1'].view.setValues(nearPlane=63.9102, 
    farPlane=98.3675, width=14.3175, height=4.97355, viewOffsetX=4.51881, 
    viewOffsetY=-0.909081)
a = mdb.models['Model-1'].rootAssembly
i1 = a.instances['Wall-1-lin-1-2']
leaf = dgm.LeafFromInstance((i1, ))
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.replace(
    leaf=leaf)
leaf = dgm.Leaf(leafType=DEFAULT_MODEL)
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.replace(
    leaf=leaf)
a = mdb.models['Model-1'].rootAssembly
i1 = a.instances['Wall-1-lin-1-2']
leaf = dgm.LeafFromInstance((i1, ))
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.remove(leaf=leaf)
session.viewports['Viewport: 1'].view.setValues(nearPlane=64.0332, 
    farPlane=98.243, width=12.0415, height=4.18293, viewOffsetX=4.30156, 
    viewOffsetY=-0.844147)
a = mdb.models['Model-1'].rootAssembly
i1 = a.instances['DikeRigid-1']
leaf = dgm.LeafFromInstance((i1, ))
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.remove(leaf=leaf)
session.viewports['Viewport: 1'].view.setValues(nearPlane=64.6778, 
    farPlane=100.011, width=12.1628, height=4.22503, cameraPosition=(88.5351, 
    30.377, 18.3971), cameraUpVector=(-0.659955, 0.746279, -0.0867619), 
    cameraTarget=(19.8589, 1.7646, 1.89193), viewOffsetX=4.34486, 
    viewOffsetY=-0.852645)
session.viewports['Viewport: 1'].view.setValues(nearPlane=64.8455, 
    farPlane=99.8428, width=9.90355, height=3.44024, viewOffsetX=5.28626, 
    viewOffsetY=-0.0705804)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].view.setValues(nearPlane=66.9916, 
    farPlane=102.079, width=10.2313, height=3.5541, cameraPosition=(86.801, 
    -29.4401, 24.334), cameraUpVector=(-0.184451, 0.898797, 0.397669), 
    cameraTarget=(18.4157, -4.99369, 1.24002), viewOffsetX=5.46121, 
    viewOffsetY=-0.0729163)
session.viewports['Viewport: 1'].view.setValues(nearPlane=67.1407, 
    farPlane=101.929, width=7.72804, height=2.68452, viewOffsetX=6.62185, 
    viewOffsetY=3.27497)
session.viewports['Viewport: 1'].view.setValues(nearPlane=67.3703, 
    farPlane=101.844, width=7.75447, height=2.69371, cameraPosition=(84.9005, 
    -36.7205, 19.2018), cameraUpVector=(-0.0988899, 0.882195, 0.460382), 
    cameraTarget=(17.8784, -5.66263, 0.468199), viewOffsetX=6.6445, 
    viewOffsetY=3.28617)
session.viewports['Viewport: 1'].view.setValues(nearPlane=67.0325, 
    farPlane=101.634, width=7.71559, height=2.6802, cameraPosition=(85.2445, 
    -29.0646, 28.1936), cameraUpVector=(-0.20983, 0.898211, 0.386248), 
    cameraTarget=(18.0839, -4.96512, 1.4324), viewOffsetX=6.61118, 
    viewOffsetY=3.26969)
session.viewports['Viewport: 1'].view.setValues(nearPlane=67.2002, 
    farPlane=101.573, width=7.73489, height=2.6869, cameraPosition=(83.3424, 
    -36.6239, 23.3379), cameraUpVector=(-0.125356, 0.883377, 0.451588), 
    cameraTarget=(17.5198, -5.62166, 0.672096), viewOffsetX=6.62772, 
    viewOffsetY=3.27787)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Block-2-lin-1-5-lin-11-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#20 ]', ), )
region = regionToolset.Region(faces=faces1)
mdb.models['Model-1'].VelocityBC(name='BC-2', createStepName='Initial', 
    region=region, v1=UNSET, v2=0.0, v3=UNSET, vr1=UNSET, vr2=UNSET, vr3=UNSET, 
    amplitude=UNSET, localCsys=None, distributionType=UNIFORM, fieldName='')
session.viewports['Viewport: 1'].view.setValues(nearPlane=66.1945, 
    farPlane=102.579, width=20.6914, height=7.18768, viewOffsetX=8.58278, 
    viewOffsetY=3.00356)
del mdb.models['Model-1'].boundaryConditions['BC-2']
session.viewports['Viewport: 1'].view.setValues(session.views['Iso'])
session.viewports['Viewport: 1'].view.setValues(nearPlane=56.8447, 
    farPlane=91.6674, width=45.6046, height=15.8419, viewOffsetX=8.38604, 
    viewOffsetY=-0.901776)
leaf = dgm.Leaf(leafType=DEFAULT_MODEL)
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.replace(
    leaf=leaf)
a = mdb.models['Model-1'].rootAssembly
i1 = a.instances['Wall-1-lin-1-2']
leaf = dgm.LeafFromInstance((i1, ))
session.viewports['Viewport: 1'].assemblyDisplay.displayGroup.remove(leaf=leaf)
session.viewports['Viewport: 1'].view.setValues(nearPlane=59.0613, 
    farPlane=88.5515, width=3.05838, height=1.06241, viewOffsetX=3.56089, 
    viewOffsetY=-2.28818)
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Block-2-lin-1-5-lin-11-1'].faces
v1 = a.instances['Block-2-lin-1-5-lin-11-1'].vertices
a.DatumAxisByNormalToPlane(plane=f1[4], point=v1[4])
session.viewports['Viewport: 1'].view.setValues(nearPlane=57.8781, 
    farPlane=92.3812, width=2.97629, height=1.03389, viewOffsetX=3.65149, 
    viewOffsetY=-2.11702)
a = mdb.models['Model-1'].rootAssembly
v11 = a.instances['Block-2-lin-1-5-lin-11-1'].vertices
a.DatumCsysByThreePoints(origin=v11[6], point1=v11[4], name='Datum csys-2', 
    coordSysType=CARTESIAN, line2=(0.075, 0.225, 0.0))
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Block-2-lin-1-5-lin-11-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#10 ]', ), )
region = regionToolset.Region(faces=faces1)
datum = mdb.models['Model-1'].rootAssembly.datums[496]
mdb.models['Model-1'].DisplacementBC(name='BC-2', createStepName='Initial', 
    region=region, u1=UNSET, u2=SET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET, 
    amplitude=UNSET, distributionType=UNIFORM, fieldName='', localCsys=datum)
del mdb.models['Model-1'].boundaryConditions['BC-2']
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Loading')
a = mdb.models['Model-1'].rootAssembly
f1 = a.instances['Block-2-lin-1-5-lin-11-1'].faces
faces1 = f1.getSequenceFromMask(mask=('[#10 ]', ), )
region = regionToolset.Region(faces=faces1)
datum = mdb.models['Model-1'].rootAssembly.datums[496]
mdb.models['Model-1'].DisplacementBC(name='BC-2', createStepName='Loading', 
    region=region, u1=UNSET, u2=0.5, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET, 
    amplitude='pull_step', fixed=OFF, distributionType=UNIFORM, fieldName='', 
    localCsys=datum)
mdb.models['Model-1'].loads['pull'].suppress()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
o3 = session.openOdb(
    name='D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-1.odb')
#: Model: D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-1.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     13
#: Number of Meshes:             14
#: Number of Element Sets:       0
#: Number of Node Sets:          4
#: Number of Steps:              2
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].view.setValues(nearPlane=47.6691, 
    farPlane=83.951, width=49.6902, height=17.2611, cameraPosition=(67.393, 
    40.3687, 5.49828), cameraUpVector=(-0.806828, 0.57735, -0.125284), 
    cameraTarget=(14.5814, 2.57775, -2.70228))
session.viewports['Viewport: 1'].view.setValues(nearPlane=50.903, 
    farPlane=80.717, width=9.19967, height=3.19573, viewOffsetX=1.28791, 
    viewOffsetY=-2.38123)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=873.591, 
    farPlane=1344.97, width=20.6927, height=7.18813, viewOffsetX=-32.0044, 
    viewOffsetY=101.673)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['Job-2'].submit(consistencyChecking=OFF)
#: The job input file "Job-2.inp" has been submitted for analysis.
#: Job Job-2: Analysis Input File Processor completed successfully.
#: Job Job-2: Abaqus/Explicit Packager completed successfully.
session.viewports['Viewport: 1'].view.setValues(nearPlane=57.0126, 
    farPlane=93.2467, width=14.4994, height=5.02739, viewOffsetX=5.07632, 
    viewOffsetY=-2.35608)
a = mdb.models['Model-1'].rootAssembly
del a.features['Datum axis-5']
session.viewports['Viewport: 1'].view.setValues(nearPlane=58.2409, 
    farPlane=89.372, width=13.7805, height=4.52993, viewOffsetX=5.39295, 
    viewOffsetY=-2.33594)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
mdb.models['Model-1'].fieldOutputRequests['F-Output-2'].setValuesInStep(
    stepName='Loading', variables=('S', 'SVAVG', 'PE', 'PEVAVG', 'PEEQ', 
    'PEEQVAVG', 'LE', 'U', 'V', 'A', 'RF', 'BF', 'P', 'CSTRESS', 'CFORCE', 
    'EVF'))
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
#: Job Job-2: Abaqus/Explicit completed successfully.
#: Job Job-2 completed successfully. 
session.viewports['Viewport: 1'].setValues(
    displayedObject=session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-1.odb'])
o3 = session.openOdb(
    name='D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-2.odb')
#: Model: D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-2.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     13
#: Number of Meshes:             14
#: Number of Element Sets:       0
#: Number of Node Sets:          4
#: Number of Steps:              2
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].view.setValues(nearPlane=48.0952, 
    farPlane=82.7137, width=52.9796, height=17.4154, cameraPosition=(52.5339, 
    40.3687, 34.8381), cameraTarget=(14.743, 2.57775, -2.95282))
session.viewports['Viewport: 1'].view.setValues(nearPlane=48.0359, 
    farPlane=83.9526, width=52.9142, height=17.3939, cameraPosition=(67.9942, 
    40.3687, -7.31566), cameraUpVector=(-0.81373, 0.57735, 0.0671593), 
    cameraTarget=(14.7309, 2.57775, -2.91972))
session.viewports['Viewport: 1'].view.setValues(nearPlane=50.7674, 
    farPlane=81.2212, width=15.8992, height=5.22636, viewOffsetX=-0.142068, 
    viewOffsetY=-2.28918)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].view.setValues(nearPlane=179.638, 
    farPlane=282.556, width=5.36299, height=1.76292, viewOffsetX=3.35779, 
    viewOffsetY=22.0707)
session.animationOptions.setValues(frameRate=45)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].view.setValues(nearPlane=189.945, 
    farPlane=279.941, width=2.51151, height=0.825581, viewOffsetX=3.34323, 
    viewOffsetY=23.4252)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
leaf = dgo.Leaf(leafType=DEFAULT_MODEL)
session.viewports['Viewport: 1'].odbDisplay.displayGroup.replace(leaf=leaf)
leaf = dgo.LeafFromPartInstance(partInstanceName=("BLOCK-2-LIN-1-5-LIN-11-1", 
    ))
session.viewports['Viewport: 1'].odbDisplay.displayGroup.replace(leaf=leaf)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-2.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'RF', NODAL, ((INVARIANT, 'Magnitude'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.XYPlot('XYPlot-1')
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-2.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-2.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'RF', NODAL, ((INVARIANT, 'Magnitude'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0:4 #1000000 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-2.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-2.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'RF', NODAL), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), 
    ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-2.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-2.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL), ('U', NODAL, ((COMPONENT, 'U2'), 
    )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-2.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL), ('U', NODAL, ((COMPONENT, 'U2'), 
    )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.Job(name='Job-3', objectToCopy=mdb.jobs['Job-2'])
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
mdb.models['Model-1'].boundaryConditions['BC-2'].setValues(u2=0.2)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF)
mdb.jobs['Job-3'].submit(consistencyChecking=OFF)
#: The job input file "Job-3.inp" has been submitted for analysis.
#: Job Job-3: Analysis Input File Processor completed successfully.
#: Job Job-3: Abaqus/Explicit Packager completed successfully.
#: Job Job-3: Abaqus/Explicit completed successfully.
#: Job Job-3 completed successfully. 
o3 = session.openOdb(
    name='D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb')
#: Model: D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb
#: Number of Assemblies:         1
#: Number of Assembly instances: 0
#: Number of Part instances:     13
#: Number of Meshes:             14
#: Number of Element Sets:       0
#: Number of Node Sets:          4
#: Number of Steps:              2
session.viewports['Viewport: 1'].setValues(displayedObject=o3)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].view.setValues(nearPlane=49.991, 
    farPlane=80.9207, width=29.9759, height=9.85368, viewOffsetX=2.42434, 
    viewOffsetY=-1.63333)
session.viewports['Viewport: 1'].view.setValues(nearPlane=51.2147, 
    farPlane=83.4487, width=30.7097, height=10.0949, cameraPosition=(69.7455, 
    40.3687, 1.13218), cameraUpVector=(-0.815877, 0.57735, -0.03181), 
    cameraTarget=(16.3416, 2.57775, -0.949971), viewOffsetX=2.48369, 
    viewOffsetY=-1.67331)
session.viewports['Viewport: 1'].view.setValues(nearPlane=51.9427, 
    farPlane=82.7206, width=19.5918, height=6.44019, viewOffsetX=2.50794, 
    viewOffsetY=-1.98516)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
x = session.xyPlots['XYPlot-1']
session.viewports['Viewport: 1'].setValues(displayedObject=x)
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
xy1 = session.xyDataObjects['_CNORMF   General_Contact_Domain:CNORMF1 PI: BLOCK-2-LIN-1-5-LIN-11-1 N: 33']
c1 = session.Curve(xyData=xy1)
chart.setValues(curvesToPlot=(c1, ), )
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=52.5018, 
    farPlane=82.1615, width=12.3371, height=4.05543, viewOffsetX=2.5584, 
    viewOffsetY=-2.11757)
leaf = dgo.LeafFromPartInstance(partInstanceName=("BLOCK-2-LIN-1-5-LIN-11-1", 
    ))
session.viewports['Viewport: 1'].odbDisplay.displayGroup.replace(leaf=leaf)
session.viewports['Viewport: 1'].view.setValues(nearPlane=62.0712, 
    farPlane=63.1586, width=3.10938, height=1.02211, viewOffsetX=1.73419, 
    viewOffsetY=-2.66344)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL), (
    'CPRESS     General_Contact_Domain', NODAL), ('U', NODAL, ((COMPONENT, 
    'U2'), )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), 
    )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
x = session.xyPlots['XYPlot-1']
session.viewports['Viewport: 1'].setValues(displayedObject=x)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL), (
    'CPRESS     General_Contact_Domain', NODAL), ('U', NODAL, ((COMPONENT, 
    'U1'), )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), 
    )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U1'), (COMPONENT, 'U2'), (COMPONENT, 'U3'), )), 
    ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=ON, bcs=ON, 
    predefinedFields=ON, connectors=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(loads=OFF, bcs=OFF, 
    predefinedFields=OFF, connectors=OFF, adaptiveMeshConstraints=ON)
xyp = session.xyPlots['XYPlot-1']
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
xyp = session.xyPlots['XYPlot-1']
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    DEFORMED, ))
dtm = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb'].rootAssembly.datumCsyses['"ASSEMBLY__T-Datum csys-2"']
session.viewports['Viewport: 1'].odbDisplay.basicOptions.setValues(
    transformationType=USER_SPECIFIED, datumCsys=dtm)
leaf = dgo.Leaf(leafType=DEFAULT_MODEL)
session.viewports['Viewport: 1'].odbDisplay.displayGroup.replace(leaf=leaf)
session.viewports['Viewport: 1'].view.setValues(nearPlane=50.2345, 
    farPlane=84.4288, width=42.7364, height=14.0483, viewOffsetX=2.716, 
    viewOffsetY=-2.09949)
dtm = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb'].rootAssembly.datumCsyses['"ASSEMBLY__T-Datum csys-2"']
dtm = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb'].rootAssembly.datumCsyses['"ASSEMBLY__T-Datum csys-2"']
x = session.xyPlots['XYPlot-1']
session.viewports['Viewport: 1'].setValues(displayedObject=x)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=52.6335, 
    farPlane=82.0298, width=10.3667, height=3.40772, viewOffsetX=2.43257, 
    viewOffsetY=-2.52898)
leaf = dgo.LeafFromPartInstance(partInstanceName=("BLOCK-2-LIN-1-5-LIN-11-1", 
    ))
session.viewports['Viewport: 1'].odbDisplay.displayGroup.replace(leaf=leaf)
session.viewports['Viewport: 1'].view.setValues(nearPlane=61.8801, 
    farPlane=63.3497, width=5.62644, height=1.84952, viewOffsetX=1.99626, 
    viewOffsetY=-2.84654)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U1'), (COMPONENT, 'U2'), (COMPONENT, 'U3'), )), 
    ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
session.xyPlots[session.viewports['Viewport: 1'].displayedObject.name].setValues(
    transform=(1.10985, 0, 0, -0.0234023, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1))
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=62.0615, 
    farPlane=63.1683, width=3.23718, height=1.06412, viewOffsetX=1.73898, 
    viewOffsetY=-2.80559)
leaf = dgo.Leaf(leafType=DEFAULT_MODEL)
session.viewports['Viewport: 1'].odbDisplay.displayGroup.replace(leaf=leaf)
session.viewports['Viewport: 1'].view.setValues(nearPlane=53.1847, 
    farPlane=81.4786, width=3.30837, height=1.08753, viewOffsetX=1.51523, 
    viewOffsetY=-2.32784)
session.animationOptions.setValues(frameRate=51)
session.animationOptions.setValues(frameRate=52)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=HARMONIC)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=TIME_HISTORY)
session.viewports['Viewport: 1'].animationController.play(duration=UNLIMITED)
session.viewports['Viewport: 1'].animationController.setValues(
    animationType=NONE)
x = session.xyPlots['XYPlot-1']
session.viewports['Viewport: 1'].setValues(displayedObject=x)
session.xyPlots[session.viewports['Viewport: 1'].displayedObject.name].setValues(
    transform=(17.6225, 0, 0, -0.273686, 0, 0.27507, 0, 0.575743, 0, 0, 
    0.27507, 0, 0, 0, 0, 1))
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
chart.removeCurve(curve=(
    '_U:U1 (ASSEMBLY__T-Datum csys-2) PI: BLOCK-2-LIN-1-5-LIN-11-1 N: 33', ), )
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
leaf = dgo.LeafFromPartInstance(partInstanceName=("BLOCK-2-LIN-1-5-LIN-11-1", 
    ))
session.viewports['Viewport: 1'].odbDisplay.displayGroup.replace(leaf=leaf)
session.viewports['Viewport: 1'].view.setValues(nearPlane=62.111, 
    farPlane=63.1188, width=2.50548, height=0.823599, viewOffsetX=1.68023, 
    viewOffsetY=-2.70188)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U2'), (COMPONENT, 'U3'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CSHEARF  General_Contact_Domain', NODAL, ((COMPONENT, 'CSHEARF1'), (
    COMPONENT, 'CSHEARF2'), (COMPONENT, 'CSHEARF3'), )), ('U', NODAL, ((
    COMPONENT, 'U2'), )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, (
    '[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.viewports['Viewport: 1'].setValues(displayedObject=xyp)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CPRESS     General_Contact_Domain', NODAL), ('U', NODAL, ((COMPONENT, 
    'U2'), )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), 
    )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL), ('U', NODAL, ((COMPONENT, 'U2'), 
    )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CPRESS     General_Contact_Domain', NODAL), ('U', NODAL, ((COMPONENT, 
    'U2'), )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), 
    )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U2'), )), ('S', INTEGRATION_POINT, ((COMPONENT, 
    'S22'), )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), 
    ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'U', NODAL, ((COMPONENT, 'U2'), )), ('S', INTEGRATION_POINT, ((INVARIANT, 
    'Mises'), )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), 
    ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'RF', NODAL, ((INVARIANT, 'Magnitude'), )), ('U', NODAL, ((COMPONENT, 
    'U2'), )), ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), 
    )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'RF', NODAL, ((COMPONENT, 'RF1'), )), ('U', NODAL, ((COMPONENT, 'U2'), )), 
    ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'RF', NODAL, ((COMPONENT, 'RF2'), )), ('U', NODAL, ((COMPONENT, 'U2'), )), 
    ), nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((COMPONENT, 'CNORMF2'), )), (
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((COMPONENT, 'CNORMF1'), )), (
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.xyPlots[session.viewports['Viewport: 1'].displayedObject.name].setValues(
    transform=(0.778905, 0, 0, -0.0197767, 0, 0.778905, 0, 0.005297, 0, 0, 
    0.778905, 0, 0, 0, 0, 1))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((COMPONENT, 'CNORMF3'), )), (
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((COMPONENT, 'CNORMF1'), (
    COMPONENT, 'CNORMF3'), )), ('U', NODAL, ((COMPONENT, 'U2'), )), ), 
    nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((COMPONENT, 'CNORMF1'), (
    COMPONENT, 'CNORMF2'), )), ('U', NODAL, ((COMPONENT, 'U2'), )), ), 
    nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((COMPONENT, 'CNORMF1'), (
    COMPONENT, 'CNORMF2'), )), ('U', NODAL, ((COMPONENT, 'U2'), )), ), 
    nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((COMPONENT, 'CNORMF2'), )), (
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((COMPONENT, 'CNORMF1'), (
    COMPONENT, 'CNORMF3'), )), ('U', NODAL, ((COMPONENT, 'U2'), )), ), 
    nodePick=(('BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((INVARIANT, 'Magnitude'), )), (
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.xyPlots[session.viewports['Viewport: 1'].displayedObject.name].setValues(
    transform=(0.569723, 0, 0, -0.292634, 0, 0.569723, 0, 0.16375, 0, 0, 
    0.569723, 0, 0, 0, 0, 1))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((COMPONENT, 'CNORMF1'), )), (
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.xyPlots[session.viewports['Viewport: 1'].displayedObject.name].setValues(
    transform=(0.381858, 0, 0, -0.424958, 0, 0.381858, 0, 0.185958, 0, 0, 
    0.381858, 0, 0, 0, 0, 1))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
xyList = xyPlot.xyDataListFromField(odb=odb, outputPosition=NODAL, variable=((
    'CNORMF   General_Contact_Domain', NODAL, ((INVARIANT, 'Magnitude'), )), (
    'U', NODAL, ((COMPONENT, 'U2'), )), ), nodePick=((
    'BLOCK-2-LIN-1-5-LIN-11-1', 1, ('[#0 #1 ]', )), ), )
xyp = session.xyPlots['XYPlot-1']
chartName = xyp.charts.keys()[0]
chart = xyp.charts[chartName]
curveList = session.curveSet(xyData=xyList)
chart.setValues(curvesToPlot=curveList)
session.charts[chartName].autoColor(lines=True, symbols=True)
session.xyPlots[session.viewports['Viewport: 1'].displayedObject.name].setValues(
    transform=(0.570222, 0, 0, -0.249198, 0, 0.570222, 0, 0.24043, 0, 0, 
    0.570222, 0, 0, 0, 0, 1))
odb = session.odbs['D:/tpennock/GitHub/Thesis_Repository/1.2-9 Block Flume pull test fd/Job-3.odb']
session.viewports['Viewport: 1'].setValues(displayedObject=odb)
session.viewports['Viewport: 1'].odbDisplay.display.setValues(plotState=(
    UNDEFORMED, ))
session.viewports['Viewport: 1'].view.setValues(nearPlane=61.6121, 
    farPlane=63.6177, width=8.95721, height=2.94441, viewOffsetX=2.39778, 
    viewOffsetY=-2.89648)
x = session.xyPlots['XYPlot-1']
session.viewports['Viewport: 1'].setValues(displayedObject=x)
#: The contents of viewport "Viewport: 1" have been copied to the clipboard.
chart = session.charts['Chart-1']
axis = chart.axes2[1]
chart.moveAxisUp(axis)
mdb.save()
#: The model database has been saved to "D:\tpennock\GitHub\Thesis_Repository\1.2-9 Block Flume pull test fd\First delta flume.cae".
